#include <windows.h>

#include <stdio.h>

#include <lm.h>

 

#pragma comment(lib, Netapi32.lib)

 

int wmain(int argc, WCHAR *lpszArgv[])

{

   PSHARE_INFO_502 BufPtr,p;

   NET_API_STATUS res;

   LPTSTR   lpszServer = NULL;

   DWORD er=0,tr=0,resume=0, i;

 

   switch(argc)

   {

   case 2:

      lpszServer = lpszArgv[1];

      break;

   default:

      wprintf(LUsage: %s <servername>\n, lpszArgv[0]);

      return 1;

   }

 

   // Print a report header.

   wprintf(LShare               Local Path                           Uses    Descriptor\n);

   wprintf(L------------------------------------------------------------------------------\n);

 

   // Call the NetShareEnum() function; specify level 502.

   do // begin do

   {

      res = NetShareEnum(lpszServer, 502, (LPBYTE *) &BufPtr, -1, &er, &tr, &resume);

 

      // If the call succeeds,

      if(res == ERROR_SUCCESS || res == ERROR_MORE_DATA)

      {

         p=BufPtr;

 

         wprintf(LNetShareEnum() is OK!\n);

 

         // Loop through the entries;

         //  print retrieved data.

         for(i=1;i<=er;i++)

         {

            wprintf(L%-20s%-45s%-8u,p->shi502_netname, p->shi502_path, p->shi502_current_uses);

 

            // Validate the value of the

            //  shi502_security_descriptor member.

            if (IsValidSecurityDescriptor(p->shi502_security_descriptor))

               wprintf(LYes\n);

            else

               wprintf(LNo\n);

            p++;

         }

 

         // Free the allocated buffer.

         NetApiBufferFree(BufPtr);

      }

      else

        {

              wprintf(LNetShareEnum() failed! Error: %ld\n, res);

        }

   }

   // Continue to call NetShareEnum() while there are more entries.

   while (res==ERROR_MORE_DATA); // end do

   return 0;

}
