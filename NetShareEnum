# Define the ShareInfo1 class to match the struct used by NetShareEnum
class ShareInfo1 {
    [String] $shi1_netname
    [UInt32] $shi1_type
    [String] $shi1_remark

    ShareInfo1([String] $netname, [UInt32] $type, [String] $remark) {
        $this.shi1_netname = $netname
        $this.shi1_type = $type
        $this.shi1_remark = $remark
    }
}

# Define the PInvoke function signature for NetShareEnum
$signature = @"
[DllImport("netapi32.dll", CharSet = CharSet.Unicode)]
public static extern uint NetShareEnum(
    string servername,
    uint level,
    out IntPtr bufptr,
    uint prefmaxlen,
    out uint entriesread,
    out uint totalentries,
    IntPtr resume_handle
);
"@

# Load the PInvoke signature into the current PowerShell session
Add-Type -MemberDefinition $signature -Namespace Win32 -Name NetApi32

# Call NetShareEnum to get a list of local shares
$shares = New-Object System.Collections.Generic.List[System.Object]
$bufPtr = [IntPtr]::Zero
$entriesRead = 0
$totalEntries = 0
$resumeHandle = [IntPtr]::Zero

$retval = [Win32.NetApi32]::NetShareEnum($null, 1, [ref]$bufPtr, [System.UInt32]::MaxValue, [ref]$entriesRead, [ref]$totalEntries, $resumeHandle)

if ($retval -eq 0) {
    # Marshal the returned buffer into an array of ShareInfo1 objects
    $ptrType = [System.Runtime.InteropServices.Marshal]::SizeOf([Win32.ShareInfo1])
    for ($i = 0; $i -lt $entriesRead; $i++) {
        $ptr = [IntPtr]::Add($bufPtr, $ptrType * $i)
        $netname = [System.Runtime.InteropServices.Marshal]::PtrToStringUni([IntPtr]::Add($ptr, [System.Runtime.InteropServices.Marshal]::OffsetOf([Win32.ShareInfo1], "shi1_netname")))
        $type = [System.Runtime.InteropServices.Marshal]::ReadUInt32($ptr, [System.Runtime.InteropServices.Marshal]::OffsetOf([Win32.ShareInfo1], "shi1_type"))
        $remark = [System.Runtime.InteropServices.Marshal]::PtrToStringUni([IntPtr]::Add($ptr, [System.Runtime.InteropServices.Marshal]::OffsetOf([Win32.ShareInfo1], "shi1_remark")))
        $share = [ShareInfo1]::new($netname, $type, $remark)
        $shares.Add($share)
    }

    # Free the returned buffer
    [Win32.NetApi32]::NetApiBufferFree($bufPtr) | Out-Null

    # Output the list of shares
    Write-Host "Local shares:"
    $shares
}
else {
    Write-Error "NetShareEnum failed with error code $retval"
}
