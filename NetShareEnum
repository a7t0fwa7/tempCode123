# Define the function signature
Add-Type @"
using System;
using System.Runtime.InteropServices;

public class NetApi32
{
    [DllImport("netapi32.dll", SetLastError=true)]
    public static extern int NetShareEnum(
        [MarshalAs(UnmanagedType.LPWStr)] string serverName,
        int level,
        out IntPtr bufPtr,
        int prefMaxLen,
        out int entriesRead,
        out int totalEntries,
        ref int resumeHandle
    );

    [DllImport("netapi32.dll", SetLastError=true)]
    public static extern int NetApiFree(IntPtr bufPtr);
}

// Define the data structure to receive the share information
[StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)]
public struct SHARE_INFO_1
{
    public string shi1_netname;
    public uint shi1_type;
    public string shi1_remark;
}

"@

$serverName = $null
$level = 1
$bufPtr = [IntPtr]::Zero
$prefMaxLen = -1
$entriesRead = 0
$totalEntries = 0
$resumeHandle = 0
$result = [NetApi32]::NetShareEnum($serverName, $level, [ref]$bufPtr, $prefMaxLen, [ref]$entriesRead, [ref]$totalEntries, [ref]$resumeHandle)

if ($result -ne 0) {
Write-Host "Failed to call NetShareEnum. Error code: $result"
}
else {
# Get the data from the buffer pointer
$shareInfo = [Marshal]::PtrToStructure($bufPtr, [Type][NetApi32.SHARE_INFO_1])
for ($i = 0; $i -lt $entriesRead; $i++) {
# Write the share information to the console
Write-Host "Share name: $($shareInfo[$i].shi1_netname)"
Write-Host "Share type: $($shareInfo[$i].shi1_type)"
Write-Host "Share remark: $($shareInfo[$i].shi1_remark)"
}

[NetApi32]::NetApiFree($bufPtr)

